import html
import json
import os
from typing import Optional

from telegram import Message, Update, Bot, User, Chat
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.error import BadRequest, TelegramError, Forbidden
from telegram.ext import CommandHandler, MessageHandler, filters
from telegram.helpers import mention_html
from telegram.ext import CallbackContext
from Gbot import QUEEN_PTB, OWNER_ID, DEV_USERS, SUDO_USERS, SUPPORT_USERS, WHITELIST_USERS
from Gbot.modules.helper_funcs.chat_status import dev_plus, sudo_plus, support_plus, whitelist_plus
from Gbot.modules.log_channel import gloggable
from Gbot.modules.helper_funcs.extraction import extract_user
from Gbot.modules.sql import super_users_sql as sql


def check_user_id(user_id: int, context: CallbackContext) -> Optional[str]:
    bot = context.bot
    if not user_id:
        return "Nice try... Nope! Provide me an valid User ID."

    elif user_id == bot.id:
        return "This does not work that way."

    else:
        return None


@dev_plus
@gloggable
def addsudo(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    user = update.effective_user
    user_id = extract_user(message, args)
    user_member = await update.effective_chat.get_member(user_id)
    reply = check_user_id(user_id, bot)
    if reply:
        await message.reply_text(reply)
        return ""
    if user_id in SUDO_USERS:
        await update.effective_message.reply_text("This member is already sudo")
        return ""
    if user_id in SUPPORT_USERS:
        await message.reply_text(
            "This user is already a support user. Promoting to sudo.")
        SUPPORT_USERS.remove(user_id)
    if user_id in WHITELIST_USERS:
        await message.reply_text(
            "This user is already a whitelisted user. Promoting to sudo.")
        WHITELIST_USERS.remove(user_id)
    sql.set_superuser_role(user_id, "sudos")
    SUDO_USERS.append(user_id)
    await message.reply_text(
        "Successfully promoted {} to sudo!".format(
            user_member.user.first_name))
    return "<b>{}:</b>" \
           "\n#SUDO" \
           "\n<b>Admin:</b> {}" \
           "\n<b>User:</b> {}".format(html.escape(update.effective_chat.title),
                                      mention_html(user.id, user.first_name),
                                      mention_html(user_member.user.id, user_member.user.first_name))


@sudo_plus
@gloggable
def addsupport(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    user = update.effective_user
    user_id = extract_user(message, args)
    user_member = await update.effective_chat.get_member(user_id)
    reply = check_user_id(user_id, bot)
    if reply:
        await message.reply_text(reply)
        return ""
    if user_id in DEV_USERS:
        await update.effective_message.reply_text("Huh? he is more than support!")
        return ""
    if user_id in SUDO_USERS:
        if user.id in DEV_USERS:
            await message.reply_text(
                "This member is a sudo user. Demoting to support.")
            SUDO_USERS.remove(user_id)
        else:
            await update.effective_message.reply_text("This user is already sudo")
            return ""
    if user_id in SUPPORT_USERS:
        await update.effective_message.reply_text("This user is already a support user.")
        return ""
    if user_id in WHITELIST_USERS:
        await message.reply_text(
            "This user is already a whitelisted user. Promoting to support.")
        WHITELIST_USERS.remove(user_id)
    sql.set_superuser_role(user_id, "supports")
    SUPPORT_USERS.append(user_id)
    await message.reply_text(
        "Successfully promoted {} to support!".format(
            user_member.user.first_name))
    return "<b>{}:</b>" \
           "\n#SUPPORT" \
           "\n<b>Admin:</b> {}" \
           "\n<b>User:</b> {}".format(html.escape(update.effective_chat.title),
                                      mention_html(user.id, user.first_name),
                                      mention_html(user_member.user.id, user_member.user.first_name))


@sudo_plus
@gloggable
def addwhitelist(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    user = update.effective_user
    user_id = extract_user(message, args)
    user_member = await update.effective_chat.get_member(user_id)
    reply = check_user_id(user_id, bot)
    if reply:
        await message.reply_text(reply)
        return ""
    if user_id in DEV_USERS:
        await update.effective_message.reply_text("Huh? he is more than whitelist!")
        return ""
    if user_id in SUDO_USERS:
        if user.id in DEV_USERS:
            await message.reply_text(
                "This member is a sudo user. Demoting to whitelist.")
            SUDO_USERS.remove(user_id)
        else:
            await update.effective_message.reply_text("This user is already sudo")
            return ""
    if user_id in SUPPORT_USERS:
        await message.reply_text(
            "This user is already a support user. Demoting to whitelist.")
        SUPPORT_USERS.remove(user_id)
    if user_id in WHITELIST_USERS:
        await update.effective_message.reply_text("This user is already a whitelisted user.")
        return ""
    sql.set_superuser_role(user_id, "whitelists")
    WHITELIST_USERS.append(user_id)
    await message.reply_text(
        "Successfully promoted {} to whitelist!".format(
            user_member.user.first_name))
    return "<b>{}:</b>" \
           "\n#WHITELIST" \
           "\n<b>Admin:</b> {}" \
           "\n<b>User:</b> {}".format(html.escape(update.effective_chat.title),
                                      mention_html(user.id, user.first_name),
                                      mention_html(user_member.user.id, user_member.user.first_name))


@dev_plus
@gloggable
def removesudo(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    user = update.effective_user
    user_id = extract_user(message, args)
    user_member = await update.effective_chat.get_member(user_id)
    reply = check_user_id(user_id, bot)
    if reply:
        await message.reply_text(reply)
        return ""
    if user_id in SUDO_USERS:
        await update.effective_message.reply_text("Demoting to normal user")
        SUDO_USERS.remove(user_id)
        sql.remove_superuser(user_id)
        return "<b>{}:</b>" \
           "\n#UNSUDO" \
           "\n<b>Admin:</b> {}" \
           "\n<b>User:</b> {}".format(html.escape(update.effective_chat.title),
                                      mention_html(user.id, user.first_name),
                                      mention_html(user_member.user.id, user_member.user.first_name))
    else:
        await update.effective_message.reply_text("This user is not a sudo!")
        return ""


@sudo_plus
@gloggable
def removesupport(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    user = update.effective_user
    user_id = extract_user(message, args)
    user_member = await update.effective_chat.get_member(user_id)
    reply = check_user_id(user_id, bot)
    if reply:
        await message.reply_text(reply)
        return ""
    if user_id in SUPPORT_USERS:
        await update.effective_message.reply_text("Demoting to normal user")
        SUPPORT_USERS.remove(user_id)
        sql.remove_superuser(user_id)
        return "<b>{}:</b>" \
           "\n#UNSUPPORT" \
           "\n<b>Admin:</b> {}" \
           "\n<b>User:</b> {}".format(html.escape(update.effective_chat.title),
                                      mention_html(user.id, user.first_name),
                                      mention_html(user_member.user.id, user_member.user.first_name))
    else:
        await update.effective_message.reply_text("This user is not a support user!")
        return ""


@sudo_plus
@gloggable
def removewhitelist(update: Update, context: CallbackContext) -> str:
    bot = context.bot
    args = context.args
    message = update.effective_message
    user = update.effective_user
    user_id = extract_user(message, args)
    user_member = await update.effective_chat.get_member(user_id)
    reply = check_user_id(user_id, bot)
    if reply:
        await message.reply_text(reply)
        return ""
    if user_id in WHITELIST_USERS:
        await update.effective_message.reply_text("Demoting to normal user")
        WHITELIST_USERS.remove(user_id)
        sql.remove_superuser(user_id)
        return "<b>{}:</b>" \
           "\n#UNWHITELIST" \
           "\n<b>Admin:</b> {}" \
           "\n<b>User:</b> {}".format(html.escape(update.effective_chat.title),
                                      mention_html(user.id, user.first_name),
                                      mention_html(user_member.user.id, user_member.user.first_name))
    else:
        await update.effective_message.reply_text("This user is not a whitelisted user!")
        return ""


@whitelist_plus
def devlist(update: Update, context: CallbackContext) -> None:
    bot = context.bot
    message = update.effective_message
    true_dev = list(set(DEV_USERS) - {OWNER_ID})
    msg = "<b>Dev users:</b>\n"
    for each_user in true_dev:
        user_id = int(each_user)
        try:
            user = await bot.get_chat(user_id)
            msg += f"➛ {mention_html(user_id, user.first_name)}\n"
        except TelegramError:
            pass
    await message.reply_text(msg, parse_mode=ParseMode.HTML)


@whitelist_plus
def sudolist(update: Update, context: CallbackContext) -> None:
    bot = context.bot
    message = update.effective_message
    true_sudo = list(set(SUDO_USERS) - set(DEV_USERS))
    msg = "<b>Sudo users:</b>\n"
    for each_user in true_sudo:
        user_id = int(each_user)
        try:
            user = await bot.get_chat(user_id)
            msg += f"➛ {mention_html(user_id, user.first_name)}\n"
        except TelegramError:
            pass
    await message.reply_text(msg, parse_mode=ParseMode.HTML)


@whitelist_plus
def supportlist(update: Update, context: CallbackContext) -> None:
    bot = context.bot
    message = update.effective_message
    msg = "<b>Support users:</b>\n"
    for each_user in SUPPORT_USERS:
        user_id = int(each_user)
        try:
            user = await bot.get_chat(user_id)
            msg += f"➛ {mention_html(user_id, user.first_name)}\n"
        except TelegramError:
            pass
    await message.reply_text(msg, parse_mode=ParseMode.HTML)


@whitelist_plus
def whitelistlist(update: Update, context: CallbackContext) -> None:
    bot = context.bot
    message = update.effective_message
    msg = "<b>Whitelist users:</b>\n"
    for each_user in WHITELIST_USERS:
        user_id = int(each_user)
        try:
            user = await bot.get_chat(user_id)
            msg += f"➛ {mention_html(user_id, user.first_name)}\n"
        except TelegramError:
            pass
    await message.reply_text(msg, parse_mode=ParseMode.HTML)


__help__ = """
*⚠️ Notice:*
Commands listed here only work for users with special access and are mainly used for troubleshooting, debugging purposes.
Group admins/group owners do not need these commands. 

*List all special users:*
➛ /sudolist`: lists all users which have sudo access to the bot
➛ /supportlist`: lists all users which are allowed to gban, but can also be banned
➛ /whitelistlist`: lists all users which cannot be banned, muted flood or kicked but can be manually banned by admins
➛ /devlist`: lists all developer users who will have the same perms as the owner
➛ /addsudo`: adds a user as sudo
➛ /addsupport`: adds a user as support
➛ /addwhitelist`: adds a user as whitelist
➛ /removesudo`: remove a sudo user
➛ /removesupport`: remove support user
➛ /removewhitelist`: remove a whitelist user
 
*Broadcast: (Bot owner only)*
• *Note:* this supports basic markdown
➛ /broadcastall`: broadcasts everywhere
➛ /broadcastusers`: broadcasts too all users
➛ /broadcastgroups`: broadcasts too all groups
 
*Groups Info:*
➛ /groups`: list the groups with Name, ID, members count as a txt
➛ /chatlist`: same as groups
➛ /leave <ID>`: leave the group, ID must have hyphen
➛ /stats`: shows overall bot stats
➛ /getchats`: gets a list of group names the user has been seen in. Bot owner only
➛ /ginfo username/link/ID`: pulls info panel for entire group
 
*Access control:* 
➛ /ignore`: blacklists a user from using the bot entirely
➛ /notice`: removes user from blacklist
➛ /ignoredlist`: lists ignored users
 
*Sys tools:* 
➛ /ip`: gets bot connection ip (bot owner only)
➛ /ping`: gets ping time of bot to telegram server
➛ /alive`: bot is alive or not 
 
*Global Bans:*
➛ /gban <id> <reason>`: gbans the user, works by reply too
➛ /ungban`: ungbans the user, same usage as gban
➛ /gbanlist`: outputs a list of gbanned users
 
*Module loading:*
➛ /listmodules`: prints modules and their names
➛ /unload <name>`: unloads module dynamically
➛ /load <name>`: loads module
 
*Remote commands:*
➛ /rban user group`: remote ban
➛ /runban user group`: remote un-ban
➛ /rpunch user group`: remote punch
➛ /rmute user group`: remote mute
➛ /runmute user group`: remote un-mute
➛ /ginfo username/link/ID`: pulls info panel for entire group
 
*Chatbot:* 
➛ /listaichats`: lists the chats the chatmode is enabled in
 
*Debugging and Shell:* 
➛ /debug <on/off>`: logs commands to updates.txt
➛ /logs`: run this in support group to get logs in pm
➛ /eval`: self explanatory
➛ /sh`: runs shell command (bot owner only)
➛ /py`: runs python code (bot owner only)
➛ /clearlocals`: as the name goes
➛ /dbcleanup`: removes deleted accs and groups from db
 
Visit @{SUPPORT_CHAT} for more information.
 
"""

__mod_name__ = "Super Users"

SUDO_HANDLER = CommandHandler("addsudo", addsudo)
UNSUDO_HANDLER = CommandHandler("removesudo", removesudo)
SUPPORT_HANDLER = CommandHandler("addsupport", addsupport)
UNSUPPORT_HANDLER = CommandHandler("removesupport",
                                   removesupport)
WHITELIST_HANDLER = CommandHandler("addwhitelist",
                                   addwhitelist)
UNWHITELIST_HANDLER = CommandHandler("removewhitelist",
                                     removewhitelist)
DEVLIST_HANDLER = CommandHandler(("devlist"), devlist)
SUDOLIST_HANDLER = CommandHandler(("sudolist"), sudolist)
SUPPORTLIST_HANDLER = CommandHandler(("supportlist"),
                                     supportlist)
WHITELISTLIST_HANDLER = CommandHandler(("whitelistlist"),
                                       whitelistlist)

QUEEN_PTB.add_handler(SUDO_HANDLER)
QUEEN_PTB.add_handler(UNSUDO_HANDLER)
QUEEN_PTB.add_handler(SUPPORT_HANDLER)
QUEEN_PTB.add_handler(UNSUPPORT_HANDLER)
QUEEN_PTB.add_handler(WHITELIST_HANDLER)
QUEEN_PTB.add_handler(UNWHITELIST_HANDLER)

QUEEN_PTB.add_handler(DEVLIST_HANDLER)
QUEEN_PTB.add_handler(SUDOLIST_HANDLER)
QUEEN_PTB.add_handler(SUPPORTLIST_HANDLER)
QUEEN_PTB.add_handler(WHITELISTLIST_HANDLER)
